@{ 
   var oMSGs = ((List<FriendCash.Model.Tools.Message>)ViewData["MSG"]); 
   if (oMSGs != null && oMSGs.Where(DATA => DATA.Type != FriendCash.Model.Tools.Message.enType.Message).Count() != 0)
   {
      var oPackage = new FriendCash.Model.Tools.Package(oMSGs);
      var oPackageJson = Converter.GetPackageJson(oPackage, string.Empty, false);
      <script type="text/javascript">
         $(window).load(function () {
            var oJson = @(new HtmlString(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(oPackageJson)));
            ShowMessage(oJson)
         });
      </script>
   }
}
       
<div id="footer" class="navbar navbar-default navbar-fixed-bottom bg-info text-info">
   <div class="container">
      <div class="row">
         <div class="col-xs-7 col-sm-9">
         @{ if (oMSGs != null)
            {
               var oMessages = oMSGs.Where(DATA => DATA.Type == FriendCash.Model.Tools.Message.enType.Message);
               if (oMessages.Count() > 0)
               {
                  foreach (var oMSG in oMessages)
                  { <p class="text-primary">@oMSG.Text</p> }
               }
            }
         }
         </div>
         <div class="col-xs-3 col-sm-2">
            <small>@System.Threading.Thread.CurrentThread.CurrentUICulture.ToString()</small>
         </div>
         <div class="col-xs-2 col-sm-1">
            @{
               var oVersion = typeof(Web.MvcApplication).Assembly.GetName().Version;
               var sVersion = "v" +
                  oVersion.Major.ToString() + "." +
                  oVersion.Minor.ToString() + "." +
                  oVersion.Build.ToString() + 
                  "";
            }
            <small>@sVersion</small>
         </div>
      </div>
   </div>
</div>
