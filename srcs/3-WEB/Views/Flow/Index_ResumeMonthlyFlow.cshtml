<div class="panel panel-default">
   <div class="panel-heading">
      <h4>@FriendCash.Resources.Flow.TITLE_MONTHLY_FLOW</h4>
   </div>
   <div class="panel-body">
   @{ 
      var oFlow = (List<FriendCash.Model.ViewMonthlyFlow>)ViewData[FriendCash.Service.Flow.TAG_ENTITY_LIST]; 
      if (oFlow != null)
      {

         <svg class="graph" xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 120 60">
            <g class="graph-grid" >
               <line x1="0%"  y1="91%" x2="100%"  y2="91%"></line>
               <line x1="0%"  y1="10%" x2="0%"  y2="91%"></line>
            </g>
            @{
               var iFactor = (int)80;
               var iSpace = ((int)100 / oFlow.Count());
               var iMax = oFlow.Max(x => x.BalanceValue);
               var iMaxIncome = oFlow.Max(x => x.IncomeValue); if (iMax < iMaxIncome) { iMax = iMaxIncome; }
               var iMaxExpense = oFlow.Max(x => x.ExpenseValue); if (iMax < iMaxExpense) { iMax = iMaxExpense; }
               var iX = 0; var xBalance1 = 0; var yBalance1 = 0; var vBalance1 = (double)0;

               foreach (var oData in oFlow)
               {
                  var iLeft = ((int)((iX) * iSpace)) + 5;
                  <g class="graph-label"><text x="@(iLeft)%" y="98%">@string.Format("{0:MM/yy}", oData.Date)</text></g>

                  var iIncomeHeight = (int)(oData.IncomeValue / iMax * iFactor);
                  var iIncomeTop = (iFactor + 10) - iIncomeHeight;
                  <rect class="graph-success" width="3" height="@(iIncomeHeight)%" x="@(iLeft)%" y="@(iIncomeTop)%">
                     <title>@string.Format("{0:c}", oData.IncomeValue)</title>
                  </rect>
                  
                  var iExpenseHeight = (int)(oData.ExpenseValue / iMax * iFactor);
                  var iExpenseTop = (iFactor + 10) - iExpenseHeight;
                  <rect class="graph-danger" width="3" height="@(iExpenseHeight)%" x="@(iLeft+4)%" y="@(iExpenseTop)%">
                     <title>@string.Format("{0:c}", oData.ExpenseValue)</title>
                  </rect>
               
                  var xBalance2 = iLeft+3;
                  var yBalance2 = (iFactor + 10) - ((int)(oData.BalanceValue / iMax * iFactor));
                  var vBalance2 = oData.BalanceValue;
                  if (xBalance1 != 0)
                  {
                     <g class="graph-avg" >
                        <line x1="@(xBalance1)%" y1="@(yBalance1)%" x2="@(xBalance2)%"  y2="@(yBalance2)%"></line>
                        <circle  cx="@(xBalance1)%" cy="@(yBalance1)%" r="0.5">
                           <title>@string.Format("{0:c}", vBalance1)</title>
                        </circle>
                     </g>                                                                                                                               
                  }
                  xBalance1 = xBalance2;
                  yBalance1 = yBalance2;
                  vBalance1 = vBalance2;
                  iX++;
                  
                }
               <g class="graph-avg" >
                  <circle  cx="@(xBalance1)%" cy="@(yBalance1)%" r="0.5">
                     <title>@string.Format("{0:c}", vBalance1)</title>
                  </circle>
               </g>                                                                                                                               
             }
         </svg>

      }
   }
   </div>
</div>


